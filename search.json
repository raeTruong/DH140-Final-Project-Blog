[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "title",
    "section": "",
    "text": "Title of Project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst File\n\n\n\n\n\nTesting Quarto\n\n\n\n\n\nJul 17, 2024\n\n\nYour Name\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/NoteBook.html",
    "href": "posts/NoteBook.html",
    "title": "Title of Project",
    "section": "",
    "text": "By Rachel Truong\nPublished August 2, 2024"
  },
  {
    "objectID": "posts/NoteBook.html#introduction",
    "href": "posts/NoteBook.html#introduction",
    "title": "Title of Project",
    "section": "Introduction",
    "text": "Introduction\n\nplay pokemon\nstruggle against another pokemon\nwonder how to stop this\n\n\nMotivation\n\nwanted to do data-driven approach\ni just wanted play pokemon man\nive never analyzed pokemon before\nthis was me a week ago when playing pokemon\nliterally had 1 pokemon on me who kept dying\nthus i decided to do this so i stop struggling as hard\n\n\n\nBackground\n\nmake clear its main pokemon games, not pokemon go\nexplain what pokemon is\nexplain system of pokemon\n\n\n\nData Description and Source\nFor this project, I will be using PokeAPI, an API linked to multiple databases detailing everything about the Pokémon main game series. I will be specifically be using data from these databases: | Dataset | Description | Link | |———|—————————————————————————————————–|————————————————| | Pokemon | Database of all pokemon that exist in the game, as well as their stats | API Docs | | Types | Database of the pokemon types, and anything that relates to them (type effectiveness, Pokemon, etc) | API Docs |\n\n\nResearch Questions\n\nWhat is best typing?\nWhat is best stats?\nWhat is best pokemon to have on you when running into random pokemon and trainers"
  },
  {
    "objectID": "posts/NoteBook.html#methods",
    "href": "posts/NoteBook.html#methods",
    "title": "Title of Project",
    "section": "Methods",
    "text": "Methods\n\nLibrary Imports\n\nimport pandas as pd\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport requests\n\n\n\nData Preparation\n\n# Getting the list of all Pokemon\nurl = \"https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0\"\nresponse = requests.get(url)\npoke_url = response.json()['results']\n\n# Getting the data for each Pokemon\npoke_details = []\nfor pokemon in poke_url:\n    response = requests.get(pokemon['url'])\n    poke_details.append(response.json())\n\n# Converting data to DataFrame\npoke_df = pd.DataFrame(poke_details)\n\n# Saving the data to a csv file (for cache reasons)\npoke_df.to_json('data/pokemon_data.json', orient='records', lines=True)\n\nFor consistency’s sake, I downloaded the dataframe I fetched so that I didnt have wait 3 minutes to run it all over again. The following code is to load\n\n# Loading the data from the csv file\npoke_df = pd.read_json('data/pokemon_data.json', orient='records', lines=True)\n\n\n# Taking a look at the data\npoke_df.head()\n\n\n\n\n\n\n\n\nabilities\nbase_experience\ncries\nforms\ngame_indices\nheight\nheld_items\nid\nis_default\nlocation_area_encounters\nmoves\nname\norder\npast_abilities\npast_types\nspecies\nsprites\nstats\ntypes\nweight\n\n\n\n\n0\n[{'ability': {'name': 'overgrow', 'url': 'http...\n64.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'bulbasaur', 'url': 'https://pokeapi...\n[{'game_index': 153, 'version': {'name': 'red'...\n7\n[]\n1\nTrue\nhttps://pokeapi.co/api/v2/pokemon/1/encounters\n[{'move': {'name': 'razor-wind', 'url': 'https...\nbulbasaur\n1\n[]\n[]\n{'name': 'bulbasaur', 'url': 'https://pokeapi....\n{'back_default': 'https://raw.githubuserconten...\n[{'base_stat': 45, 'effort': 0, 'stat': {'name...\n[{'slot': 1, 'type': {'name': 'grass', 'url': ...\n69\n\n\n1\n[{'ability': {'name': 'overgrow', 'url': 'http...\n142.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'ivysaur', 'url': 'https://pokeapi.c...\n[{'game_index': 9, 'version': {'name': 'red', ...\n10\n[]\n2\nTrue\nhttps://pokeapi.co/api/v2/pokemon/2/encounters\n[{'move': {'name': 'swords-dance', 'url': 'htt...\nivysaur\n2\n[]\n[]\n{'name': 'ivysaur', 'url': 'https://pokeapi.co...\n{'back_default': 'https://raw.githubuserconten...\n[{'base_stat': 60, 'effort': 0, 'stat': {'name...\n[{'slot': 1, 'type': {'name': 'grass', 'url': ...\n130\n\n\n2\n[{'ability': {'name': 'overgrow', 'url': 'http...\n263.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'venusaur', 'url': 'https://pokeapi....\n[{'game_index': 154, 'version': {'name': 'red'...\n20\n[]\n3\nTrue\nhttps://pokeapi.co/api/v2/pokemon/3/encounters\n[{'move': {'name': 'swords-dance', 'url': 'htt...\nvenusaur\n3\n[]\n[]\n{'name': 'venusaur', 'url': 'https://pokeapi.c...\n{'back_default': 'https://raw.githubuserconten...\n[{'base_stat': 80, 'effort': 0, 'stat': {'name...\n[{'slot': 1, 'type': {'name': 'grass', 'url': ...\n1000\n\n\n3\n[{'ability': {'name': 'blaze', 'url': 'https:/...\n62.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'charmander', 'url': 'https://pokeap...\n[{'game_index': 176, 'version': {'name': 'red'...\n6\n[]\n4\nTrue\nhttps://pokeapi.co/api/v2/pokemon/4/encounters\n[{'move': {'name': 'mega-punch', 'url': 'https...\ncharmander\n5\n[]\n[]\n{'name': 'charmander', 'url': 'https://pokeapi...\n{'back_default': 'https://raw.githubuserconten...\n[{'base_stat': 39, 'effort': 0, 'stat': {'name...\n[{'slot': 1, 'type': {'name': 'fire', 'url': '...\n85\n\n\n4\n[{'ability': {'name': 'blaze', 'url': 'https:/...\n142.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'charmeleon', 'url': 'https://pokeap...\n[{'game_index': 178, 'version': {'name': 'red'...\n11\n[]\n5\nTrue\nhttps://pokeapi.co/api/v2/pokemon/5/encounters\n[{'move': {'name': 'mega-punch', 'url': 'https...\ncharmeleon\n6\n[]\n[]\n{'name': 'charmeleon', 'url': 'https://pokeapi...\n{'back_default': 'https://raw.githubuserconten...\n[{'base_stat': 58, 'effort': 0, 'stat': {'name...\n[{'slot': 1, 'type': {'name': 'fire', 'url': '...\n190\n\n\n\n\n\n\n\n\n# Extra every type name into list for each Pokemon and replace the 'types' column\ntypes_array = []\nfor value in poke_df['types']:\n    types = []\n    for attr in value: \n        types.append(attr['type']['name'])\n    types_array.append(types)\n\npoke_df['types'] = types_array\npoke_df['types'].head()\n\n0    [grass, poison]\n1    [grass, poison]\n2    [grass, poison]\n3             [fire]\n4             [fire]\nName: types, dtype: object\n\n\n\n# Extract the stat.name and base_stat into a new DataFrame\nstats_df = []\nfor row in poke_df['stats']:\n    stats = {}\n    for attr in row:\n        stats[attr['stat']['name']] = attr['base_stat']\n    stats[\"total\"] = sum(stats.values())\n    stats_df.append(stats)\n \n# Convert stats_df to Pandas dataframe and merge with the original df\nstats_df = pd.DataFrame(stats_df)\npoke_df = pd.concat([poke_df, stats_df], axis=1)\npoke_df.head()\n\n\n\n\n\n\n\n\nabilities\nbase_experience\ncries\nforms\ngame_indices\nheight\nheld_items\nid\nis_default\nlocation_area_encounters\n...\nstats\ntypes\nweight\nhp\nattack\ndefense\nspecial-attack\nspecial-defense\nspeed\ntotal\n\n\n\n\n0\n[{'ability': {'name': 'overgrow', 'url': 'http...\n64.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'bulbasaur', 'url': 'https://pokeapi...\n[{'game_index': 153, 'version': {'name': 'red'...\n7\n[]\n1\nTrue\nhttps://pokeapi.co/api/v2/pokemon/1/encounters\n...\n[{'base_stat': 45, 'effort': 0, 'stat': {'name...\n[grass, poison]\n69\n45\n49\n49\n65\n65\n45\n318\n\n\n1\n[{'ability': {'name': 'overgrow', 'url': 'http...\n142.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'ivysaur', 'url': 'https://pokeapi.c...\n[{'game_index': 9, 'version': {'name': 'red', ...\n10\n[]\n2\nTrue\nhttps://pokeapi.co/api/v2/pokemon/2/encounters\n...\n[{'base_stat': 60, 'effort': 0, 'stat': {'name...\n[grass, poison]\n130\n60\n62\n63\n80\n80\n60\n405\n\n\n2\n[{'ability': {'name': 'overgrow', 'url': 'http...\n263.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'venusaur', 'url': 'https://pokeapi....\n[{'game_index': 154, 'version': {'name': 'red'...\n20\n[]\n3\nTrue\nhttps://pokeapi.co/api/v2/pokemon/3/encounters\n...\n[{'base_stat': 80, 'effort': 0, 'stat': {'name...\n[grass, poison]\n1000\n80\n82\n83\n100\n100\n80\n525\n\n\n3\n[{'ability': {'name': 'blaze', 'url': 'https:/...\n62.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'charmander', 'url': 'https://pokeap...\n[{'game_index': 176, 'version': {'name': 'red'...\n6\n[]\n4\nTrue\nhttps://pokeapi.co/api/v2/pokemon/4/encounters\n...\n[{'base_stat': 39, 'effort': 0, 'stat': {'name...\n[fire]\n85\n39\n52\n43\n60\n50\n65\n309\n\n\n4\n[{'ability': {'name': 'blaze', 'url': 'https:/...\n142.0\n{'latest': 'https://raw.githubusercontent.com/...\n[{'name': 'charmeleon', 'url': 'https://pokeap...\n[{'game_index': 178, 'version': {'name': 'red'...\n11\n[]\n5\nTrue\nhttps://pokeapi.co/api/v2/pokemon/5/encounters\n...\n[{'base_stat': 58, 'effort': 0, 'stat': {'name...\n[fire]\n190\n58\n64\n58\n80\n65\n80\n405\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n# Keeping only the columns we need\npoke_df = poke_df[['name', 'types', 'hp', 'attack', 'defense', 'speed', 'special-attack', 'special-defense', 'total']]\npoke_df.head()\n\n\n\n\n\n\n\n\nname\ntypes\nhp\nattack\ndefense\nspeed\nspecial-attack\nspecial-defense\ntotal\n\n\n\n\n0\nbulbasaur\n[grass, poison]\n45\n49\n49\n45\n65\n65\n318\n\n\n1\nivysaur\n[grass, poison]\n60\n62\n63\n60\n80\n80\n405\n\n\n2\nvenusaur\n[grass, poison]\n80\n82\n83\n80\n100\n100\n525\n\n\n3\ncharmander\n[fire]\n39\n52\n43\n65\n60\n50\n309\n\n\n4\ncharmeleon\n[fire]\n58\n64\n58\n80\n80\n65\n405\n\n\n\n\n\n\n\n\n# checking for nulls\npoke_df.isnull().sum()\n\nname               0\ntypes              0\nhp                 0\nattack             0\ndefense            0\nspeed              0\nspecial-attack     0\nspecial-defense    0\ntotal              0\ndtype: int64\n\n\n\n\nUnderstanding Data\nhis can include summary information about the data, summary statistics, an identification of where there may be missing/incorrect/outlier data, and data processing It should include at least 4 exploratory data visualizations\n\nThe Pokemon Database\nGeneral Stats\n\npoke_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1302 entries, 0 to 1301\nData columns (total 9 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   name             1302 non-null   object\n 1   types            1302 non-null   object\n 2   hp               1302 non-null   int64 \n 3   attack           1302 non-null   int64 \n 4   defense          1302 non-null   int64 \n 5   speed            1302 non-null   int64 \n 6   special-attack   1302 non-null   int64 \n 7   special-defense  1302 non-null   int64 \n 8   total            1302 non-null   int64 \ndtypes: int64(7), object(2)\nmemory usage: 91.7+ KB\n\n\n\npoke_df.describe()\n\n\n\n\n\n\n\n\nhp\nattack\ndefense\nspeed\nspecial-attack\nspecial-defense\ntotal\n\n\n\n\ncount\n1302.000000\n1302.000000\n1302.000000\n1302.000000\n1302.000000\n1302.000000\n1302.000000\n\n\nmean\n71.264977\n81.580645\n75.241935\n71.156682\n73.649002\n72.966974\n445.860215\n\n\nstd\n26.764202\n31.673015\n30.492559\n30.310259\n32.469611\n27.358069\n119.865940\n\n\nmin\n1.000000\n5.000000\n5.000000\n5.000000\n10.000000\n20.000000\n175.000000\n\n\n25%\n54.000000\n58.000000\n53.000000\n48.000000\n50.000000\n52.000000\n335.000000\n\n\n50%\n70.000000\n80.000000\n70.000000\n70.000000\n65.000000\n70.000000\n470.000000\n\n\n75%\n85.000000\n100.000000\n95.000000\n92.000000\n95.000000\n90.000000\n525.000000\n\n\nmax\n255.000000\n190.000000\n250.000000\n200.000000\n194.000000\n250.000000\n1125.000000\n\n\n\n\n\n\n\n\n\nDistribution By Pokemon Stats\n\n# Create 3x3 grid of subplots\nfig, axs = plt.subplots(3, 3, figsize=(15, 15)) \n\n# Plot 1: Histogram of HP\naxs[0, 0].hist(poke_df['hp'], color='blue', alpha=0.7)\naxs[0, 0].set_title('HP Distribution')\naxs[0, 0].set_xlabel('HP')\naxs[0, 0].set_ylabel('Frequency')\n\n# Plot 2: Histogram of Attack\naxs[0, 1].hist(poke_df['attack'], color='green', alpha=0.7)\naxs[0, 1].set_title('Attack Distribution')\naxs[0, 1].set_xlabel('Attack')\naxs[0, 1].set_ylabel('Frequency')\n\n# Plot 3: Histogram of Defense\naxs[0, 2].hist(poke_df['defense'], color='red', alpha=0.7)\naxs[0, 2].set_title('Defense Distribution')\naxs[0, 2].set_xlabel('Defense')\naxs[0, 2].set_ylabel('Frequency')\n\n# Plot 4: Histogram of Speed\naxs[1, 0].hist(poke_df['speed'], color='purple', alpha=0.7)\naxs[1, 0].set_title('Speed Distribution')\naxs[1, 0].set_xlabel('Speed')\naxs[1, 0].set_ylabel('Frequency')\n\n# Plot 5: Histogram of Special Attack\naxs[1, 1].hist(poke_df['special-attack'], color='orange', alpha=0.7)\naxs[1, 1].set_title('Special Attack Distribution')\naxs[1, 1].set_xlabel('Special Attack')\naxs[1, 1].set_ylabel('Frequency')\n\n# Plot 6: Histogram of Special Defense\naxs[1, 2].hist(poke_df['special-defense'], color='brown', alpha=0.7)\naxs[1, 2].set_title('Special Defense Distribution')\naxs[1, 2].set_xlabel('Special Defense')\naxs[1, 2].set_ylabel('Frequency')\n\n# Plot 7: Histogram of Total Stats\naxs[2, 1].hist(poke_df['total'], color='black', alpha=0.7)\naxs[2, 1].set_title('Total Stats Distribution')\naxs[2, 1].set_xlabel('Total Stats')\naxs[2, 1].set_ylabel('Frequency')\n\n# Adjust layout to prevent overlap and show plots\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nPokemon Type Chart\n\n# Count the number of types each pokemon has \nnum_types = [len(x) for x in poke_df['types']]\n\n# Count the number of Pokémon with 1 type and 2 types\nnum_counts = pd.Series(num_types).value_counts()\n\n# Plotting the bar graph\nnum_counts.plot(kind='bar', color=['blue', 'orange'], alpha=0.7)\n\n# Display the plot\nplt.xlabel('Number of Types')\nplt.ylabel('Number of Pokémon')\nplt.title('Number of Pokémon with 1 Type vs 2 Types')\nplt.xticks(ticks=[0, 1], labels=['1 Type', '2 Types'])\nplt.show()\n\n\n\n\n\n\n\n\n\n# Step 2: Count the occurrences of each type\ntype_counts = pd.Series(poke_df['types']).value_counts()\n\n# Step 3: Plotting the pie chart\ntype_counts.plot(kind='pie', y='count', autopct='%1.1f%%', legend=False, figsize=(8, 8))\n\n# Display the plot\nplt.ylabel('')\nplt.title('Distribution of Pokémon Types')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Flatten nested list of types into a single list\nall_types = [type_ for types_list in poke_df['types'] for type_ in types_list]\nprint(all_types)\n\n# Step 2: Count the occurrences of each type\ntype_counts = pd.Series(all_types).value_counts()\n\n# Step 3: Plotting the pie chart\ntype_counts.plot(kind='pie', y='count', autopct='%1.1f%%', legend=False, figsize=(8, 8))\n\n# Display the plot\nplt.ylabel('')\nplt.title('Distribution of Pokémon Types')\nplt.show()\n\n['grass', 'poison', 'grass', 'poison', 'grass', 'poison', 'fire', 'fire', 'fire', 'flying', 'water', 'water', 'water', 'bug', 'bug', 'bug', 'flying', 'bug', 'poison', 'bug', 'poison', 'bug', 'poison', 'normal', 'flying', 'normal', 'flying', 'normal', 'flying', 'normal', 'normal', 'normal', 'flying', 'normal', 'flying', 'poison', 'poison', 'electric', 'electric', 'ground', 'ground', 'poison', 'poison', 'poison', 'ground', 'poison', 'poison', 'poison', 'ground', 'fairy', 'fairy', 'fire', 'fire', 'normal', 'fairy', 'normal', 'fairy', 'poison', 'flying', 'poison', 'flying', 'grass', 'poison', 'grass', 'poison', 'grass', 'poison', 'bug', 'grass', 'bug', 'grass', 'bug', 'poison', 'bug', 'poison', 'ground', 'ground', 'normal', 'normal', 'water', 'water', 'fighting', 'fighting', 'fire', 'fire', 'water', 'water', 'water', 'fighting', 'psychic', 'psychic', 'psychic', 'fighting', 'fighting', 'fighting', 'grass', 'poison', 'grass', 'poison', 'grass', 'poison', 'water', 'poison', 'water', 'poison', 'rock', 'ground', 'rock', 'ground', 'rock', 'ground', 'fire', 'fire', 'water', 'psychic', 'water', 'psychic', 'electric', 'steel', 'electric', 'steel', 'normal', 'flying', 'normal', 'flying', 'normal', 'flying', 'water', 'water', 'ice', 'poison', 'poison', 'water', 'water', 'ice', 'ghost', 'poison', 'ghost', 'poison', 'ghost', 'poison', 'rock', 'ground', 'psychic', 'psychic', 'water', 'water', 'electric', 'electric', 'grass', 'psychic', 'grass', 'psychic', 'ground', 'ground', 'fighting', 'fighting', 'normal', 'poison', 'poison', 'ground', 'rock', 'ground', 'rock', 'normal', 'grass', 'normal', 'water', 'water', 'water', 'water', 'water', 'water', 'psychic', 'psychic', 'fairy', 'bug', 'flying', 'ice', 'psychic', 'electric', 'fire', 'bug', 'normal', 'water', 'water', 'flying', 'water', 'ice', 'normal', 'normal', 'water', 'electric', 'fire', 'normal', 'rock', 'water', 'rock', 'water', 'rock', 'water', 'rock', 'water', 'rock', 'flying', 'normal', 'ice', 'flying', 'electric', 'flying', 'fire', 'flying', 'dragon', 'dragon', 'dragon', 'flying', 'psychic', 'psychic', 'grass', 'grass', 'grass', 'fire', 'fire', 'fire', 'water', 'water', 'water', 'normal', 'normal', 'normal', 'flying', 'normal', 'flying', 'bug', 'flying', 'bug', 'flying', 'bug', 'poison', 'bug', 'poison', 'poison', 'flying', 'water', 'electric', 'water', 'electric', 'electric', 'fairy', 'normal', 'fairy', 'fairy', 'fairy', 'flying', 'psychic', 'flying', 'psychic', 'flying', 'electric', 'electric', 'electric', 'grass', 'water', 'fairy', 'water', 'fairy', 'rock', 'water', 'grass', 'flying', 'grass', 'flying', 'grass', 'flying', 'normal', 'grass', 'grass', 'bug', 'flying', 'water', 'ground', 'water', 'ground', 'psychic', 'dark', 'dark', 'flying', 'water', 'psychic', 'ghost', 'psychic', 'psychic', 'normal', 'psychic', 'bug', 'bug', 'steel', 'normal', 'ground', 'flying', 'steel', 'ground', 'fairy', 'fairy', 'water', 'poison', 'bug', 'steel', 'bug', 'rock', 'bug', 'fighting', 'dark', 'ice', 'normal', 'normal', 'fire', 'fire', 'rock', 'ice', 'ground', 'ice', 'ground', 'water', 'rock', 'water', 'water', 'ice', 'flying', 'water', 'flying', 'steel', 'flying', 'dark', 'fire', 'dark', 'fire', 'water', 'dragon', 'ground', 'ground', 'normal', 'normal', 'normal', 'fighting', 'fighting', 'ice', 'psychic', 'electric', 'fire', 'normal', 'normal', 'electric', 'fire', 'water', 'rock', 'ground', 'rock', 'ground', 'rock', 'dark', 'psychic', 'flying', 'fire', 'flying', 'psychic', 'grass', 'grass', 'grass', 'grass', 'fire', 'fire', 'fighting', 'fire', 'fighting', 'water', 'water', 'ground', 'water', 'ground', 'dark', 'dark', 'normal', 'normal', 'bug', 'bug', 'bug', 'flying', 'bug', 'bug', 'poison', 'water', 'grass', 'water', 'grass', 'water', 'grass', 'grass', 'grass', 'dark', 'grass', 'dark', 'normal', 'flying', 'normal', 'flying', 'water', 'flying', 'water', 'flying', 'psychic', 'fairy', 'psychic', 'fairy', 'psychic', 'fairy', 'bug', 'water', 'bug', 'flying', 'grass', 'grass', 'fighting', 'normal', 'normal', 'normal', 'bug', 'ground', 'bug', 'flying', 'bug', 'ghost', 'normal', 'normal', 'normal', 'fighting', 'fighting', 'normal', 'fairy', 'rock', 'normal', 'normal', 'dark', 'ghost', 'steel', 'fairy', 'steel', 'rock', 'steel', 'rock', 'steel', 'rock', 'fighting', 'psychic', 'fighting', 'psychic', 'electric', 'electric', 'electric', 'electric', 'bug', 'bug', 'grass', 'poison', 'poison', 'poison', 'water', 'dark', 'water', 'dark', 'water', 'water', 'fire', 'ground', 'fire', 'ground', 'fire', 'psychic', 'psychic', 'normal', 'ground', 'ground', 'dragon', 'ground', 'dragon', 'grass', 'grass', 'dark', 'normal', 'flying', 'dragon', 'flying', 'normal', 'poison', 'rock', 'psychic', 'rock', 'psychic', 'water', 'ground', 'water', 'ground', 'water', 'water', 'dark', 'ground', 'psychic', 'ground', 'psychic', 'rock', 'grass', 'rock', 'grass', 'rock', 'bug', 'rock', 'bug', 'water', 'water', 'normal', 'normal', 'ghost', 'ghost', 'ghost', 'ghost', 'grass', 'flying', 'psychic', 'dark', 'psychic', 'ice', 'ice', 'ice', 'water', 'ice', 'water', 'ice', 'water', 'water', 'water', 'water', 'water', 'rock', 'water', 'dragon', 'dragon', 'dragon', 'flying', 'steel', 'psychic', 'steel', 'psychic', 'steel', 'psychic', 'rock', 'ice', 'steel', 'dragon', 'psychic', 'dragon', 'psychic', 'water', 'ground', 'dragon', 'flying', 'steel', 'psychic', 'psychic', 'grass', 'grass', 'grass', 'ground', 'fire', 'fire', 'fighting', 'fire', 'fighting', 'water', 'water', 'water', 'steel', 'normal', 'flying', 'normal', 'flying', 'normal', 'flying', 'normal', 'normal', 'water', 'bug', 'bug', 'electric', 'electric', 'electric', 'grass', 'poison', 'grass', 'poison', 'rock', 'rock', 'rock', 'steel', 'rock', 'steel', 'bug', 'bug', 'grass', 'bug', 'flying', 'bug', 'flying', 'bug', 'flying', 'electric', 'water', 'water', 'grass', 'grass', 'water', 'water', 'ground', 'normal', 'ghost', 'flying', 'ghost', 'flying', 'normal', 'normal', 'ghost', 'dark', 'flying', 'normal', 'normal', 'psychic', 'poison', 'dark', 'poison', 'dark', 'steel', 'psychic', 'steel', 'psychic', 'rock', 'psychic', 'fairy', 'normal', 'normal', 'flying', 'ghost', 'dark', 'dragon', 'ground', 'dragon', 'ground', 'dragon', 'ground', 'normal', 'fighting', 'fighting', 'steel', 'ground', 'ground', 'poison', 'bug', 'poison', 'dark', 'poison', 'fighting', 'poison', 'fighting', 'grass', 'water', 'water', 'water', 'flying', 'grass', 'ice', 'grass', 'ice', 'dark', 'ice', 'electric', 'steel', 'normal', 'ground', 'rock', 'grass', 'electric', 'fire', 'fairy', 'flying', 'bug', 'flying', 'grass', 'ice', 'ground', 'flying', 'ice', 'ground', 'normal', 'psychic', 'fighting', 'rock', 'steel', 'ghost', 'ice', 'ghost', 'electric', 'ghost', 'psychic', 'psychic', 'psychic', 'steel', 'dragon', 'water', 'dragon', 'fire', 'steel', 'normal', 'ghost', 'dragon', 'psychic', 'water', 'water', 'dark', 'grass', 'normal', 'psychic', 'fire', 'grass', 'grass', 'grass', 'fire', 'fire', 'fighting', 'fire', 'fighting', 'water', 'water', 'water', 'normal', 'normal', 'normal', 'normal', 'normal', 'dark', 'dark', 'grass', 'grass', 'fire', 'fire', 'water', 'water', 'psychic', 'psychic', 'normal', 'flying', 'normal', 'flying', 'normal', 'flying', 'electric', 'electric', 'rock', 'rock', 'rock', 'psychic', 'flying', 'psychic', 'flying', 'ground', 'ground', 'steel', 'normal', 'fighting', 'fighting', 'fighting', 'water', 'water', 'ground', 'water', 'ground', 'fighting', 'fighting', 'bug', 'grass', 'bug', 'grass', 'bug', 'grass', 'bug', 'poison', 'bug', 'poison', 'bug', 'poison', 'grass', 'fairy', 'grass', 'fairy', 'grass', 'grass', 'water', 'ground', 'dark', 'ground', 'dark', 'ground', 'dark', 'fire', 'fire', 'grass', 'bug', 'rock', 'bug', 'rock', 'dark', 'fighting', 'dark', 'fighting', 'psychic', 'flying', 'ghost', 'ghost', 'water', 'rock', 'water', 'rock', 'rock', 'flying', 'rock', 'flying', 'poison', 'poison', 'dark', 'dark', 'normal', 'normal', 'psychic', 'psychic', 'psychic', 'psychic', 'psychic', 'psychic', 'water', 'flying', 'water', 'flying', 'ice', 'ice', 'ice', 'normal', 'grass', 'normal', 'grass', 'electric', 'flying', 'bug', 'bug', 'steel', 'grass', 'poison', 'grass', 'poison', 'water', 'ghost', 'water', 'ghost', 'water', 'bug', 'electric', 'bug', 'electric', 'grass', 'steel', 'grass', 'steel', 'steel', 'steel', 'steel', 'electric', 'electric', 'electric', 'psychic', 'psychic', 'ghost', 'fire', 'ghost', 'fire', 'ghost', 'fire', 'dragon', 'dragon', 'dragon', 'ice', 'ice', 'ice', 'bug', 'bug', 'ground', 'electric', 'fighting', 'fighting', 'dragon', 'ground', 'ghost', 'ground', 'ghost', 'dark', 'steel', 'dark', 'steel', 'normal', 'normal', 'flying', 'normal', 'flying', 'dark', 'flying', 'dark', 'flying', 'fire', 'bug', 'steel', 'dark', 'dragon', 'dark', 'dragon', 'dark', 'dragon', 'bug', 'fire', 'bug', 'fire', 'steel', 'fighting', 'rock', 'fighting', 'grass', 'fighting', 'flying', 'electric', 'flying', 'dragon', 'fire', 'dragon', 'electric', 'ground', 'flying', 'dragon', 'ice', 'water', 'fighting', 'normal', 'psychic', 'bug', 'steel', 'grass', 'grass', 'grass', 'fighting', 'fire', 'fire', 'fire', 'psychic', 'water', 'water', 'water', 'dark', 'normal', 'normal', 'ground', 'normal', 'flying', 'fire', 'flying', 'fire', 'flying', 'bug', 'bug', 'bug', 'flying', 'fire', 'normal', 'fire', 'normal', 'fairy', 'fairy', 'fairy', 'grass', 'grass', 'fighting', 'fighting', 'dark', 'normal', 'psychic', 'psychic', 'steel', 'ghost', 'steel', 'ghost', 'steel', 'ghost', 'fairy', 'fairy', 'fairy', 'fairy', 'dark', 'psychic', 'dark', 'psychic', 'rock', 'water', 'rock', 'water', 'poison', 'water', 'poison', 'dragon', 'water', 'water', 'electric', 'normal', 'electric', 'normal', 'rock', 'dragon', 'rock', 'dragon', 'rock', 'ice', 'rock', 'ice', 'fairy', 'fighting', 'flying', 'electric', 'fairy', 'rock', 'fairy', 'dragon', 'dragon', 'dragon', 'steel', 'fairy', 'ghost', 'grass', 'ghost', 'grass', 'ghost', 'grass', 'ghost', 'grass', 'ice', 'ice', 'flying', 'dragon', 'flying', 'dragon', 'fairy', 'dark', 'flying', 'dragon', 'ground', 'rock', 'fairy', 'psychic', 'ghost', 'fire', 'water', 'grass', 'flying', 'grass', 'flying', 'grass', 'ghost', 'fire', 'fire', 'fire', 'dark', 'water', 'water', 'water', 'fairy', 'normal', 'flying', 'normal', 'flying', 'normal', 'flying', 'normal', 'normal', 'bug', 'bug', 'electric', 'bug', 'electric', 'fighting', 'fighting', 'ice', 'fire', 'flying', 'bug', 'fairy', 'bug', 'fairy', 'rock', 'rock', 'water', 'poison', 'water', 'poison', 'water', 'ground', 'ground', 'water', 'bug', 'water', 'bug', 'grass', 'grass', 'grass', 'fairy', 'grass', 'fairy', 'poison', 'fire', 'poison', 'fire', 'normal', 'fighting', 'normal', 'fighting', 'grass', 'grass', 'grass', 'fairy', 'normal', 'psychic', 'fighting', 'bug', 'water', 'bug', 'water', 'ghost', 'ground', 'ghost', 'ground', 'water', 'normal', 'normal', 'rock', 'flying', 'normal', 'fire', 'dragon', 'electric', 'steel', 'ghost', 'fairy', 'water', 'psychic', 'normal', 'dragon', 'ghost', 'grass', 'dragon', 'dragon', 'fighting', 'dragon', 'fighting', 'electric', 'fairy', 'psychic', 'fairy', 'grass', 'fairy', 'water', 'fairy', 'psychic', 'psychic', 'psychic', 'steel', 'psychic', 'ghost', 'rock', 'poison', 'bug', 'fighting', 'bug', 'fighting', 'electric', 'steel', 'flying', 'grass', 'steel', 'dark', 'dragon', 'psychic', 'steel', 'fairy', 'fighting', 'ghost', 'poison', 'poison', 'dragon', 'rock', 'steel', 'fire', 'ghost', 'electric', 'steel', 'steel', 'grass', 'grass', 'grass', 'fire', 'fire', 'fire', 'water', 'water', 'water', 'normal', 'normal', 'flying', 'flying', 'flying', 'steel', 'bug', 'bug', 'psychic', 'bug', 'psychic', 'dark', 'dark', 'grass', 'grass', 'normal', 'normal', 'water', 'water', 'rock', 'electric', 'electric', 'rock', 'rock', 'fire', 'rock', 'fire', 'grass', 'dragon', 'grass', 'dragon', 'grass', 'dragon', 'ground', 'ground', 'flying', 'water', 'water', 'water', 'electric', 'poison', 'electric', 'poison', 'fire', 'bug', 'fire', 'bug', 'fighting', 'fighting', 'ghost', 'ghost', 'psychic', 'psychic', 'psychic', 'fairy', 'dark', 'fairy', 'dark', 'fairy', 'dark', 'fairy', 'dark', 'normal', 'steel', 'ghost', 'fighting', 'ice', 'psychic', 'ground', 'ghost', 'fairy', 'fairy', 'fighting', 'electric', 'ice', 'bug', 'ice', 'bug', 'rock', 'ice', 'psychic', 'normal', 'electric', 'dark', 'steel', 'steel', 'electric', 'dragon', 'electric', 'ice', 'water', 'dragon', 'water', 'ice', 'steel', 'dragon', 'dragon', 'ghost', 'dragon', 'ghost', 'dragon', 'ghost', 'fairy', 'fighting', 'poison', 'dragon', 'fighting', 'fighting', 'dark', 'dark', 'grass', 'electric', 'dragon', 'ice', 'ghost', 'psychic', 'grass', 'normal', 'psychic', 'bug', 'rock', 'ground', 'normal', 'water', 'ghost', 'fighting', 'poison', 'dark', 'poison', 'fairy', 'flying', 'grass', 'grass', 'grass', 'dark', 'fire', 'fire', 'fire', 'ghost', 'water', 'water', 'water', 'fighting', 'normal', 'normal', 'bug', 'bug', 'bug', 'bug', 'dark', 'electric', 'electric', 'fighting', 'electric', 'fighting', 'normal', 'normal', 'fairy', 'fairy', 'grass', 'normal', 'grass', 'normal', 'grass', 'normal', 'normal', 'flying', 'rock', 'rock', 'rock', 'fire', 'fire', 'psychic', 'fire', 'ghost', 'electric', 'electric', 'electric', 'flying', 'electric', 'flying', 'dark', 'dark', 'poison', 'normal', 'poison', 'normal', 'grass', 'ghost', 'grass', 'ghost', 'ground', 'grass', 'ground', 'grass', 'rock', 'grass', 'grass', 'fire', 'bug', 'bug', 'psychic', 'psychic', 'psychic', 'fairy', 'steel', 'fairy', 'steel', 'fairy', 'steel', 'water', 'water', 'flying', 'dark', 'water', 'water', 'steel', 'poison', 'steel', 'poison', 'dragon', 'normal', 'steel', 'rock', 'poison', 'rock', 'poison', 'ghost', 'ghost', 'flying', 'fighting', 'ice', 'ice', 'water', 'psychic', 'water', 'dragon', 'water', 'fighting', 'ghost', 'poison', 'ground', 'normal', 'psychic', 'normal', 'dark', 'steel', 'ground', 'fighting', 'fairy', 'psychic', 'grass', 'dark', 'ghost', 'fairy', 'bug', 'fighting', 'electric', 'ground', 'ground', 'steel', 'ice', 'water', 'fighting', 'electric', 'dark', 'flying', 'fire', 'poison', 'rock', 'electric', 'dragon', 'ice', 'dragon', 'ice', 'dragon', 'ice', 'ghost', 'steel', 'ghost', 'dark', 'grass', 'dark', 'ice', 'dark', 'ground', 'dark', 'fire', 'dragon', 'dark', 'fairy', 'fighting', 'fighting', 'dragon', 'electric', 'dragon', 'water', 'dragon', 'grass', 'psychic', 'grass', 'dragon', 'grass', 'ghost', 'grass', 'ghost', 'poison', 'fighting', 'poison', 'psychic', 'poison', 'fairy', 'grass', 'steel', 'dragon', 'grass', 'dragon', 'fire', 'dragon', 'electric', 'dragon', 'rock', 'psychic', 'steel', 'psychic', 'normal', 'poison', 'ghost', 'psychic', 'psychic', 'psychic', 'bug', 'ground', 'bug', 'steel', 'grass', 'flying', 'ghost', 'dragon', 'electric', 'fire', 'electric', 'water', 'electric', 'ice', 'electric', 'flying', 'electric', 'grass', 'fire', 'water', 'ice', 'water', 'fire', 'psychic', 'normal', 'fighting', 'flying', 'electric', 'flying', 'ground', 'flying', 'dragon', 'ice', 'dragon', 'ice', 'water', 'fighting', 'psychic', 'steel', 'ghost', 'ghost', 'grass', 'ghost', 'grass', 'ghost', 'grass', 'ghost', 'grass', 'ghost', 'grass', 'ghost', 'grass', 'grass', 'poison', 'fire', 'dragon', 'fire', 'flying', 'water', 'psychic', 'ghost', 'poison', 'normal', 'bug', 'flying', 'water', 'dark', 'rock', 'flying', 'psychic', 'fighting', 'psychic', 'electric', 'dragon', 'bug', 'steel', 'bug', 'fighting', 'dark', 'fire', 'rock', 'dark', 'fire', 'fighting', 'psychic', 'fairy', 'steel', 'fairy', 'steel', 'fighting', 'psychic', 'electric', 'ghost', 'dark', 'dragon', 'ground', 'fighting', 'steel', 'grass', 'ice', 'fairy', 'dragon', 'psychic', 'dragon', 'psychic', 'water', 'ground', 'grass', 'dragon', 'dark', 'ghost', 'dragon', 'fairy', 'psychic', 'fighting', 'normal', 'fairy', 'water', 'dark', 'water', 'psychic', 'steel', 'ground', 'normal', 'flying', 'ice', 'rock', 'fairy', 'steel', 'psychic', 'water', 'ground', 'fire', 'dragon', 'flying', 'electric', 'electric', 'electric', 'electric', 'electric', 'electric', 'psychic', 'dark', 'fire', 'ground', 'normal', 'fighting', 'dragon', 'flying', 'bug', 'poison', 'dark', 'normal', 'dark', 'normal', 'dark', 'normal', 'electric', 'electric', 'electric', 'electric', 'electric', 'electric', 'electric', 'psychic', 'ice', 'steel', 'ice', 'steel', 'ice', 'ice', 'fairy', 'ground', 'steel', 'ground', 'steel', 'dark', 'dark', 'rock', 'electric', 'rock', 'electric', 'rock', 'electric', 'poison', 'dark', 'poison', 'dark', 'grass', 'dragon', 'fire', 'ghost', 'water', 'dark', 'water', 'dark', 'dragon', 'ground', 'dragon', 'ground', 'dragon', 'ground', 'normal', 'bug', 'electric', 'electric', 'flying', 'psychic', 'flying', 'ghost', 'flying', 'rock', 'water', 'grass', 'poison', 'fire', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'rock', 'flying', 'ghost', 'fairy', 'ghost', 'fairy', 'ghost', 'fairy', 'dragon', 'fighting', 'steel', 'fairy', 'electric', 'fire', 'ghost', 'bug', 'fairy', 'rock', 'rock', 'water', 'bug', 'electric', 'steel', 'psychic', 'steel', 'psychic', 'ghost', 'psychic', 'dragon', 'electric', 'normal', 'electric', 'steel', 'psychic', 'psychic', 'fairy', 'psychic', 'poison', 'psychic', 'fighting', 'poison', 'fairy', 'ice', 'psychic', 'psychic', 'flying', 'fighting', 'flying', 'dark', 'flying', 'poison', 'psychic', 'ghost', 'dark', 'normal', 'dark', 'normal', 'ice', 'ice', 'ice', 'fire', 'ground', 'ghost', 'ground', 'steel', 'dragon', 'ground', 'flying', 'water', 'flying', 'water', 'electric', 'poison', 'ice', 'psychic', 'normal', 'electric', 'dark', 'fairy', 'steel', 'fighting', 'steel', 'poison', 'dragon', 'fighting', 'water', 'dark', 'grass', 'psychic', 'ice', 'psychic', 'ghost', 'grass', 'poison', 'fire', 'flying', 'water', 'bug', 'flying', 'electric', 'normal', 'fighting', 'ghost', 'poison', 'water', 'water', 'ice', 'normal', 'normal', 'poison', 'steel', 'grass', 'fire', 'water', 'flying', 'steel', 'bug', 'psychic', 'water', 'rock', 'rock', 'fire', 'grass', 'dragon', 'grass', 'dragon', 'ground', 'electric', 'poison', 'fire', 'bug', 'psychic', 'fairy', 'dark', 'fairy', 'fairy', 'steel', 'steel', 'dragon', 'fighting', 'dark', 'fighting', 'water', 'electric', 'poison', 'fire', 'rock', 'fire', 'rock', 'electric', 'grass', 'electric', 'grass', 'fire', 'ghost', 'dark', 'poison', 'fighting', 'poison', 'water', 'dark', 'grass', 'fighting', 'normal', 'ghost', 'normal', 'ghost', 'psychic', 'flying', 'steel', 'dragon', 'steel', 'dragon', 'ice', 'rock', 'grass', 'fighting', 'steel', 'dragon', 'water', 'dragon', 'water', 'water', 'ghost', 'fairy', 'flying', 'fighting', 'fighting', 'fire', 'fighting', 'water', 'poison', 'ground', 'normal', 'normal', 'water', 'normal', 'dragon', 'water', 'dragon', 'water', 'normal', 'flying', 'normal', 'flying', 'normal', 'flying', 'ghost', 'fighting', 'dragon', 'fighting', 'dragon', 'fighting', 'dragon', 'fighting', 'dragon', 'electric', 'dragon', 'electric', 'dragon', 'electric', 'dragon', 'electric', 'dragon', 'ground', 'normal', 'grass', 'water', 'grass', 'fire', 'grass', 'rock', 'normal', 'normal']"
  },
  {
    "objectID": "posts/NoteBook.html#analysis-results",
    "href": "posts/NoteBook.html#analysis-results",
    "title": "Title of Project",
    "section": "Analysis & Results",
    "text": "Analysis & Results\n\nBased on Typing\n\n\nBased on Base Stats"
  },
  {
    "objectID": "posts/NoteBook.html#dicussion",
    "href": "posts/NoteBook.html#dicussion",
    "title": "Title of Project",
    "section": "Dicussion",
    "text": "Dicussion\n\nConclusion\n\n\nReferences & Sources\nwhat does your analysis show, what is the big picture, and how are these findings useful?"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Session03_NB2_PandasDatasaurus.html",
    "href": "posts/Session03_NB2_PandasDatasaurus.html",
    "title": "First File",
    "section": "",
    "text": "https://pandas.pydata.org/\nPandas data-manipulation capabilities are built on top of NumPy, utilizing its fast array processing, and its graphing capabilities are built on top of Matplotlib.\nImport the library:\nimport pandas as pd\nImport the data:\ndinodata = pd.read_csv('https://raw.githubusercontent.com/benjum/UCLA-24A6-DH140/main/data/DatasaurusDozen.csv')\nLook at some data values:\ndinodata\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.384600\n97.179500\n\n\n1\ndino\n51.538500\n96.025600\n\n\n2\ndino\n46.153800\n94.487200\n\n\n3\ndino\n42.820500\n91.410300\n\n\n4\ndino\n40.769200\n88.333300\n\n\n...\n...\n...\n...\n\n\n1841\nwide_lines\n33.674442\n26.090490\n\n\n1842\nwide_lines\n75.627255\n37.128752\n\n\n1843\nwide_lines\n40.610125\n89.136240\n\n\n1844\nwide_lines\n39.114366\n96.481751\n\n\n1845\nwide_lines\n34.583829\n89.588902\n\n\n\n\n1846 rows × 3 columns\nMaking a scatter plot of the data in the x and y columns is easy:\ndinodata.plot(x = 'x', y = 'y', kind = 'scatter')"
  },
  {
    "objectID": "posts/Session03_NB2_PandasDatasaurus.html#basic-data-structures-in-pandas",
    "href": "posts/Session03_NB2_PandasDatasaurus.html#basic-data-structures-in-pandas",
    "title": "First File",
    "section": "Basic data structures in Pandas",
    "text": "Basic data structures in Pandas\nPython can store values in a variety of data structures: single variables, lists, dictionaries, sets, etc.\nPandas has two key data structures for storing Python variables:\n\nSeries\n\n1D\nLike an array\nItems are labeled by an index\n\nDataframes\n\n2D\nLike a spreadsheet\nItems are labeled by an index (row label) and column name\n\n\ndinodata is a dataframe:\n\ndinodata\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.384600\n97.179500\n\n\n1\ndino\n51.538500\n96.025600\n\n\n2\ndino\n46.153800\n94.487200\n\n\n3\ndino\n42.820500\n91.410300\n\n\n4\ndino\n40.769200\n88.333300\n\n\n...\n...\n...\n...\n\n\n1841\nwide_lines\n33.674442\n26.090490\n\n\n1842\nwide_lines\n75.627255\n37.128752\n\n\n1843\nwide_lines\n40.610125\n89.136240\n\n\n1844\nwide_lines\n39.114366\n96.481751\n\n\n1845\nwide_lines\n34.583829\n89.588902\n\n\n\n\n1846 rows × 3 columns\n\n\n\n\nhead(n): show us the first n rows (5 by default)\ntail(n): show us the last n rows (5 by default)\ninfo() : a range of summary info\n\n\ndinodata.head()\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n1\ndino\n51.5385\n96.0256\n\n\n2\ndino\n46.1538\n94.4872\n\n\n3\ndino\n42.8205\n91.4103\n\n\n4\ndino\n40.7692\n88.3333\n\n\n\n\n\n\n\n\ndinodata.tail()\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n1841\nwide_lines\n33.674442\n26.090490\n\n\n1842\nwide_lines\n75.627255\n37.128752\n\n\n1843\nwide_lines\n40.610125\n89.136240\n\n\n1844\nwide_lines\n39.114366\n96.481751\n\n\n1845\nwide_lines\n34.583829\n89.588902\n\n\n\n\n\n\n\n\ndinodata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1846 entries, 0 to 1845\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   dataset  1846 non-null   object \n 1   x        1846 non-null   float64\n 2   y        1846 non-null   float64\ndtypes: float64(2), object(1)\nmemory usage: 43.4+ KB\n\n\nThere are several other useful dataframe attributes and methods that will allow you to get summary info: * columns : column names * dtypes : data types of the columns (dataframes can hold different datatypes in different columns) * index : information about the row indices (they don’t have to be numerical) * shape : the size of the dataframe in each dimension * describe() : basic statistics about the data columns\n\ndinodata.columns\n\nIndex(['dataset', 'x', 'y'], dtype='object')\n\n\n\ndinodata.dtypes\n\ndataset     object\nx          float64\ny          float64\ndtype: object\n\n\n\ndinodata.index\n\nRangeIndex(start=0, stop=1846, step=1)\n\n\n\ndinodata.shape\n\n(1846, 3)\n\n\n\ndinodata.describe()\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\ncount\n1846.000000\n1846.000000\n\n\nmean\n54.265695\n47.835099\n\n\nstd\n16.713001\n26.847766\n\n\nmin\n15.560750\n0.015119\n\n\n25%\n41.073403\n22.561073\n\n\n50%\n52.591269\n47.594450\n\n\n75%\n67.277845\n71.810778\n\n\nmax\n98.288123\n99.694680\n\n\n\n\n\n\n\n\ndinodata.describe(include = 'all')\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\ncount\n1846\n1846.000000\n1846.000000\n\n\nunique\n13\nNaN\nNaN\n\n\ntop\ndino\nNaN\nNaN\n\n\nfreq\n142\nNaN\nNaN\n\n\nmean\nNaN\n54.265695\n47.835099\n\n\nstd\nNaN\n16.713001\n26.847766\n\n\nmin\nNaN\n15.560750\n0.015119\n\n\n25%\nNaN\n41.073403\n22.561073\n\n\n50%\nNaN\n52.591269\n47.594450\n\n\n75%\nNaN\n67.277845\n71.810778\n\n\nmax\nNaN\n98.288123\n99.694680\n\n\n\n\n\n\n\nIf you select one of the columns of dinodata you’ll get a Series in return:\n\ndinodata['dataset']\n\n0             dino\n1             dino\n2             dino\n3             dino\n4             dino\n           ...    \n1841    wide_lines\n1842    wide_lines\n1843    wide_lines\n1844    wide_lines\n1845    wide_lines\nName: dataset, Length: 1846, dtype: object"
  },
  {
    "objectID": "posts/Session03_NB2_PandasDatasaurus.html#selecting-data-from-a-dataframe",
    "href": "posts/Session03_NB2_PandasDatasaurus.html#selecting-data-from-a-dataframe",
    "title": "First File",
    "section": "Selecting data from a dataframe",
    "text": "Selecting data from a dataframe\nIf you have a dataframe df and want to look at a specific column columnname, use df['columnname']\n\ndinodata['x']\n\n0       55.384600\n1       51.538500\n2       46.153800\n3       42.820500\n4       40.769200\n          ...    \n1841    33.674442\n1842    75.627255\n1843    40.610125\n1844    39.114366\n1845    34.583829\nName: x, Length: 1846, dtype: float64\n\n\nDataframe can have both numerical- and label-based indices. There is specific data retrieval syntax that accommodates this.\n\n# This will give an error!\ndinodata[0]\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3805, in Index.get_loc(self, key)\n   3804 try:\n-&gt; 3805     return self._engine.get_loc(casted_key)\n   3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 0\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\nCell In[22], line 2\n      1 # This will give an error!\n----&gt; 2 dinodata[0]\n\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/frame.py:4102, in DataFrame.__getitem__(self, key)\n   4100 if self.columns.nlevels &gt; 1:\n   4101     return self._getitem_multilevel(key)\n-&gt; 4102 indexer = self.columns.get_loc(key)\n   4103 if is_integer(indexer):\n   4104     indexer = [indexer]\n\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n   3807     if isinstance(casted_key, slice) or (\n   3808         isinstance(casted_key, abc.Iterable)\n   3809         and any(isinstance(x, slice) for x in casted_key)\n   3810     ):\n   3811         raise InvalidIndexError(key)\n-&gt; 3812     raise KeyError(key) from err\n   3813 except TypeError:\n   3814     # If we have a listlike key, _check_indexing_error will raise\n   3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n   3816     #  the TypeError.\n   3817     self._check_indexing_error(key)\n\nKeyError: 0\n\n\n\n\n# This will not give an error\ndinodata[0:1]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n\n\n\n\n\nIt’s best to stick with loc and iloc for the moment to index dataframes. * loc : label-based indexing (which can look numerical if the row index is a number) * iloc : numerical indexing\n\n# the first row;\n# return value is a Series\n\ndinodata.loc[0]\n\ndataset       dino\nx          55.3846\ny          97.1795\nName: 0, dtype: object\n\n\n\n# the first row;\n# return value is a Dataframe (note the index is [0])\n\ndinodata.loc[[0]]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n\n\n\n\n\n\n# the first two rows;\n# return value is a Dataframe (the index is a list [0,1])\n\ndinodata.loc[[0,1]]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n1\ndino\n51.5385\n96.0256\n\n\n\n\n\n\n\n\n# indexing both the row and column\n\ndinodata.loc[0,'x']\n\n55.3846\n\n\n\n# indexing both the row and column\n# and returning a dataframe\n\ndinodata.loc[[0],['x']]\n\n\n\n\n\n\n\n\nx\n\n\n\n\n0\n55.3846\n\n\n\n\n\n\n\n\n# you can use lists for the indices\n\ndinodata.loc[[0],['x','y']]\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\n55.3846\n97.1795\n\n\n\n\n\n\n\n\ndinodata.loc[[10],['x','y']]\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n10\n23.0769\n66.4103\n\n\n\n\n\n\n\niloc is useful when you instead want to index numerically.\n\ndinodata.iloc[0]\n\ndataset       dino\nx          55.3846\ny          97.1795\nName: 0, dtype: object\n\n\nBefore you execute the below, try to predict whether it will return a Series or a Dataframe.\n\ndinodata.iloc[1]\n\ndataset       dino\nx          51.5385\ny          96.0256\nName: 1, dtype: object\n\n\n\ndinodata.iloc[[1]]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n1\ndino\n51.5385\n96.0256\n\n\n\n\n\n\n\n\ndinodata.iloc[0:1]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n\n\n\n\n\n\ndinodata.iloc[0:4]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n1\ndino\n51.5385\n96.0256\n\n\n2\ndino\n46.1538\n94.4872\n\n\n3\ndino\n42.8205\n91.4103\n\n\n\n\n\n\n\n\n# this will give an error! you can't use a label-based index like 'x' with iloc\n\ndinodata.iloc[0:4,'x']\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexing.py:966, in _LocationIndexer._validate_tuple_indexer(self, key)\n    965 try:\n--&gt; 966     self._validate_key(k, i)\n    967 except ValueError as err:\n\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexing.py:1614, in _iLocIndexer._validate_key(self, key, axis)\n   1613 else:\n-&gt; 1614     raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")\n\nValueError: Can only index by location with a [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array]\n\nThe above exception was the direct cause of the following exception:\n\nValueError                                Traceback (most recent call last)\nCell In[36], line 3\n      1 # this will give an error! you can't use a label-based index like 'x' with iloc\n----&gt; 3 dinodata.iloc[0:4,'x']\n\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexing.py:1184, in _LocationIndexer.__getitem__(self, key)\n   1182     if self._is_scalar_access(key):\n   1183         return self.obj._get_value(*key, takeable=self._takeable)\n-&gt; 1184     return self._getitem_tuple(key)\n   1185 else:\n   1186     # we by definition only have the 0th axis\n   1187     axis = self.axis or 0\n\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexing.py:1690, in _iLocIndexer._getitem_tuple(self, tup)\n   1689 def _getitem_tuple(self, tup: tuple):\n-&gt; 1690     tup = self._validate_tuple_indexer(tup)\n   1691     with suppress(IndexingError):\n   1692         return self._getitem_lowerdim(tup)\n\nFile ~/DH140/.venv/lib/python3.11/site-packages/pandas/core/indexing.py:968, in _LocationIndexer._validate_tuple_indexer(self, key)\n    966         self._validate_key(k, i)\n    967     except ValueError as err:\n--&gt; 968         raise ValueError(\n    969             \"Location based indexing can only have \"\n    970             f\"[{self._valid_types}] types\"\n    971         ) from err\n    972 return key\n\nValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types\n\n\n\n\n# instead of referncing the column with 'x'\n# iloc indexes it numerically\n\ndinodata.iloc[0:4, 1]\n\n0    55.3846\n1    51.5385\n2    46.1538\n3    42.8205\nName: x, dtype: float64\n\n\n\ndinodata.iloc[[0,1,2,3],[1]]\n\n\n\n\n\n\n\n\nx\n\n\n\n\n0\n55.3846\n\n\n1\n51.5385\n\n\n2\n46.1538\n\n\n3\n42.8205\n\n\n\n\n\n\n\n\ndinodata.iloc[0,0]\n\n'dino'\n\n\n\ndinodata.loc[0,'dataset']\n\n'dino'"
  },
  {
    "objectID": "posts/Session03_NB2_PandasDatasaurus.html#whats-the-data-for-dataset-dino-boolean-indexing",
    "href": "posts/Session03_NB2_PandasDatasaurus.html#whats-the-data-for-dataset-dino-boolean-indexing",
    "title": "First File",
    "section": "What’s the data for ‘dataset’ == ‘dino’? Boolean indexing",
    "text": "What’s the data for ‘dataset’ == ‘dino’? Boolean indexing\nIt is useful to be able to get elements where certain conditions are true.\nLike here, we may want to get only those rows that are part of the ‘dino’ dataset.\nThis can be accomplished with boolean indexing, where the index is a True/False condition, and there is one such value for every row.\nThe following sets up the boolean series of True/False values for every row.\n\ndinodata['dataset'] == 'dino'\n\n0        True\n1        True\n2        True\n3        True\n4        True\n        ...  \n1841    False\n1842    False\n1843    False\n1844    False\n1845    False\nName: dataset, Length: 1846, dtype: bool\n\n\nWe can use that as the index to dinodata, i.e., for any dataframe df we can use df[condition] to get only those rows where condition is True\n\ndinodata[dinodata['dataset'] == 'dino']\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n1\ndino\n51.5385\n96.0256\n\n\n2\ndino\n46.1538\n94.4872\n\n\n3\ndino\n42.8205\n91.4103\n\n\n4\ndino\n40.7692\n88.3333\n\n\n...\n...\n...\n...\n\n\n137\ndino\n39.4872\n25.3846\n\n\n138\ndino\n91.2821\n41.5385\n\n\n139\ndino\n50.0000\n95.7692\n\n\n140\ndino\n47.9487\n95.0000\n\n\n141\ndino\n44.1026\n92.6923\n\n\n\n\n142 rows × 3 columns\n\n\n\nBoolean indexing also works as the index when using loc\n\ndinodata.loc[dinodata['dataset'] == 'dino']\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n1\ndino\n51.5385\n96.0256\n\n\n2\ndino\n46.1538\n94.4872\n\n\n3\ndino\n42.8205\n91.4103\n\n\n4\ndino\n40.7692\n88.3333\n\n\n...\n...\n...\n...\n\n\n137\ndino\n39.4872\n25.3846\n\n\n138\ndino\n91.2821\n41.5385\n\n\n139\ndino\n50.0000\n95.7692\n\n\n140\ndino\n47.9487\n95.0000\n\n\n141\ndino\n44.1026\n92.6923\n\n\n\n\n142 rows × 3 columns\n\n\n\n\ndinodata.loc[dinodata['dataset'] == 'circle']\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n1136\ncircle\n55.993030\n79.277264\n\n\n1137\ncircle\n50.032254\n79.013071\n\n\n1138\ncircle\n51.288459\n82.435940\n\n\n1139\ncircle\n51.170537\n79.165294\n\n\n1140\ncircle\n44.377915\n78.164628\n\n\n...\n...\n...\n...\n\n\n1273\ncircle\n39.921363\n19.701850\n\n\n1274\ncircle\n84.794278\n55.568650\n\n\n1275\ncircle\n55.662959\n83.356480\n\n\n1276\ncircle\n50.492248\n78.997532\n\n\n1277\ncircle\n51.467101\n79.201845\n\n\n\n\n142 rows × 3 columns\n\n\n\nNote above what happens to the indices. You should keep in mind this behavior if you want to index the returned result.\n\ndinodata.loc[dinodata['dataset'] == 'dino','x']\n\n0      55.3846\n1      51.5385\n2      46.1538\n3      42.8205\n4      40.7692\n        ...   \n137    39.4872\n138    91.2821\n139    50.0000\n140    47.9487\n141    44.1026\nName: x, Length: 142, dtype: float64\n\n\n\ndinodata['dataset'].str.startswith('d')\n\n0        True\n1        True\n2        True\n3        True\n4        True\n        ...  \n1841    False\n1842    False\n1843    False\n1844    False\n1845    False\nName: dataset, Length: 1846, dtype: bool\n\n\n\ndinodata.loc[dinodata['dataset'].str.startswith('d')]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.384600\n97.179500\n\n\n1\ndino\n51.538500\n96.025600\n\n\n2\ndino\n46.153800\n94.487200\n\n\n3\ndino\n42.820500\n91.410300\n\n\n4\ndino\n40.769200\n88.333300\n\n\n...\n...\n...\n...\n\n\n1131\ndots\n50.533635\n17.019581\n\n\n1132\ndots\n77.500907\n50.166986\n\n\n1133\ndots\n50.691124\n87.513960\n\n\n1134\ndots\n49.990395\n83.997357\n\n\n1135\ndots\n50.127182\n82.990750\n\n\n\n\n284 rows × 3 columns\n\n\n\n\ndinodata.loc[dinodata['dataset'].str.contains('in')]\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.384600\n97.179500\n\n\n1\ndino\n51.538500\n96.025600\n\n\n2\ndino\n46.153800\n94.487200\n\n\n3\ndino\n42.820500\n91.410300\n\n\n4\ndino\n40.769200\n88.333300\n\n\n...\n...\n...\n...\n\n\n1841\nwide_lines\n33.674442\n26.090490\n\n\n1842\nwide_lines\n75.627255\n37.128752\n\n\n1843\nwide_lines\n40.610125\n89.136240\n\n\n1844\nwide_lines\n39.114366\n96.481751\n\n\n1845\nwide_lines\n34.583829\n89.588902\n\n\n\n\n710 rows × 3 columns\n\n\n\nDataframes have many very useful methods.\n… which we will ignore for the moment until next week when we get to exploratory data analysis.\nFor now: plotting!"
  },
  {
    "objectID": "posts/Session03_NB2_PandasDatasaurus.html#plotting",
    "href": "posts/Session03_NB2_PandasDatasaurus.html#plotting",
    "title": "First File",
    "section": "Plotting",
    "text": "Plotting\nLet’s make a scatter plot with only the dino dataset\n\n# How do we get that subset of data?\n\na = dinodata[dinodata['dataset'] == 'dino']\n\nMake a plot:\n\na.plot(x='x', y='y')\n\n\n\n\n\n\n\n\nWhat’s with the zig-zags?\nBy default, pandas will make a line plot connecting the points, and since the points are plotted out of numerical order, the connecting lines zigs back and forth in the x and y direction.\nWe actually want to plot this as a scatter plot instead of a line plot.\n\na.plot(x='x', y='y', kind='scatter')\n\n\n\n\n\n\n\n\nThe kind parameter makes it very easy to make a variety of different elementary plots:\n\nline : line plot\nbar : vertical bar plot\nbarh : horizontal bar plot\nhist : histogram\nbox : boxplot\nkde : kernel density estimation plot\ndensity : same as kde\narea : area plot\npie : pie plot\nscatter : scatter plot\nhexbin : hexbin plot\n\n\na.plot(x='x', y='y', kind='bar')\n\n\n\n\n\n\n\n\nThis, of course, doesn’t mean that you don’t have to think about what you want to plot before-hand.\nTo make things easier, let’s look at a subset of data:\n\nb = a[0:15]\n\n\nb\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n0\ndino\n55.3846\n97.1795\n\n\n1\ndino\n51.5385\n96.0256\n\n\n2\ndino\n46.1538\n94.4872\n\n\n3\ndino\n42.8205\n91.4103\n\n\n4\ndino\n40.7692\n88.3333\n\n\n5\ndino\n38.7179\n84.8718\n\n\n6\ndino\n35.6410\n79.8718\n\n\n7\ndino\n33.0769\n77.5641\n\n\n8\ndino\n28.9744\n74.4872\n\n\n9\ndino\n26.1538\n71.4103\n\n\n10\ndino\n23.0769\n66.4103\n\n\n11\ndino\n22.3077\n61.7949\n\n\n12\ndino\n22.3077\n57.1795\n\n\n13\ndino\n23.3333\n52.9487\n\n\n14\ndino\n25.8974\n51.0256\n\n\n\n\n\n\n\n\nb.plot(x='x', y='y', kind='bar')\n\n\n\n\n\n\n\n\nNote that pandas does not necessarily try to order the x-axis here for us.\n\nb.sort_values(by='x')\n\n\n\n\n\n\n\n\ndataset\nx\ny\n\n\n\n\n12\ndino\n22.3077\n57.1795\n\n\n11\ndino\n22.3077\n61.7949\n\n\n10\ndino\n23.0769\n66.4103\n\n\n13\ndino\n23.3333\n52.9487\n\n\n14\ndino\n25.8974\n51.0256\n\n\n9\ndino\n26.1538\n71.4103\n\n\n8\ndino\n28.9744\n74.4872\n\n\n7\ndino\n33.0769\n77.5641\n\n\n6\ndino\n35.6410\n79.8718\n\n\n5\ndino\n38.7179\n84.8718\n\n\n4\ndino\n40.7692\n88.3333\n\n\n3\ndino\n42.8205\n91.4103\n\n\n2\ndino\n46.1538\n94.4872\n\n\n1\ndino\n51.5385\n96.0256\n\n\n0\ndino\n55.3846\n97.1795\n\n\n\n\n\n\n\n\nb.sort_values(by='x').plot()\n\n\n\n\n\n\n\n\n\nb.sort_values(by='x').plot(x='x', y='y', kind='bar')\n\n\n\n\n\n\n\n\n\nb.sort_values(by='x').plot(x='x', y='y', kind='barh')\n\n\n\n\n\n\n\n\n\na.plot(x='x',\n       y='y',\n       kind='scatter')\n\n\n\n\n\n\n\n\n\na.plot(x='x',\n       y='y',\n       kind='scatter',\n       figsize=(5,5))\n\n\n\n\n\n\n\n\n\na.plot(x='x',\n       y='y',\n       kind='scatter',\n       figsize=(5,5),\n       xlabel='hdata',\n       ylabel='vdata')\n\n\n\n\n\n\n\n\n\na.plot(x='x',\n       y='y',\n       kind='scatter',\n       figsize=(5,5),\n       xlabel='hdata',\n       ylabel='vdata',\n       color='black')\n\n\n\n\n\n\n\n\n\ndinodata[dinodata['dataset']=='dino'].plot(x='x',\n       y='y',\n       kind='scatter',\n       figsize=(5,5),\n       xlabel='hdata',\n       ylabel='vdata',\n       color='black')\n\n\n\n\n\n\n\n\nWhat datasets can we look at?\n\ndinodata['dataset'].unique()\n\narray(['dino', 'away', 'h_lines', 'v_lines', 'x_shape', 'star',\n       'high_lines', 'dots', 'circle', 'bullseye', 'slant_up',\n       'slant_down', 'wide_lines'], dtype=object)\n\n\n\ndatasets = dinodata['dataset'].unique()\n\n\nd2plot = 3\n\nprint(datasets[d2plot])\n\ndinodata[dinodata['dataset'] == datasets[d2plot]].plot(x='x',\n       y='y',\n       kind='scatter',\n       figsize=(5,5),\n       xlabel='hdata',\n       ylabel='vdata',\n       color='black')\n\nv_lines"
  },
  {
    "objectID": "posts/Session03_NB2_PandasDatasaurus.html#brief-hint-of-fun-stuff-to-come",
    "href": "posts/Session03_NB2_PandasDatasaurus.html#brief-hint-of-fun-stuff-to-come",
    "title": "First File",
    "section": "Brief hint of fun stuff to come",
    "text": "Brief hint of fun stuff to come\n\nimport matplotlib.pyplot as plt\nimport ipywidgets\n\n\ndef dinoplot(dataset):\n    fig,ax = plt.subplots(2,2,figsize=(12,12))\n    dinodata[dinodata['dataset']==dataset].plot(x='y',\n           y='x',\n           kind='hist',\n           figsize=(5,5),\n           xlabel='hdata',\n           ylabel='vdata',\n           color='black', ax=ax[0,0])\n    dinodata[dinodata['dataset']==dataset].plot(x='x',\n           y='y',\n           kind='scatter',\n           figsize=(5,5),\n           xlabel='hdata',\n           ylabel='vdata',\n           color='black', ax=ax[1,0])\n    ax[0,1].text(0.25,0.8,'x_mean = {:.2f}'.format(dinodata.loc[dinodata['dataset']==dataset,'x'].mean()))\n    ax[0,1].text(0.25,0.6,'y_mean = {:.2f}'.format(dinodata.loc[dinodata['dataset']==dataset,'y'].mean()))\n    ax[0,1].text(0.25,0.4,'x_stddev = {:.2f}'.format(dinodata.loc[dinodata['dataset']==dataset,'x'].std()))\n    ax[0,1].text(0.25,0.2,'y_stddev = {:.2f}'.format(dinodata.loc[dinodata['dataset']==dataset,'y'].std()))\n    dinodata[dinodata['dataset']==dataset].plot(x='x',\n           y='y',\n           kind='hist',\n           figsize=(5,5),\n           xlabel='hdata',\n           ylabel='vdata',\n           color='black', ax=ax[1,1])\n    \nipywidgets.interact(dinoplot,dataset=datasets)\n\n\n\n\n&lt;function __main__.dinoplot(dataset)&gt;"
  }
]